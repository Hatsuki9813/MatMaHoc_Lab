# Form implementation generated from reading ui file 'ECDCA.ui'
#
# Created by: PyQt6 UI code generator 6.7.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets
from digitalsignature import call_gen_ecdsa, call_load, call_sign_ecdsa, call_verify_ecdsa, call_gen_rsasspss, call_sign_rsasspss, call_verify_rsasspss

class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(846, 657)
        self.gridLayout = QtWidgets.QGridLayout(Form)
        self.gridLayout.setObjectName("gridLayout")
        self.widget = QtWidgets.QWidget(parent=Form)
        self.widget.setObjectName("widget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout.setObjectName("verticalLayout")
        self.algolb = QtWidgets.QLabel(parent=self.widget)
        self.algolb.setObjectName("algolb")
        self.verticalLayout.addWidget(self.algolb)
        self.formatlb = QtWidgets.QLabel(parent=self.widget)
        self.formatlb.setObjectName("formatlb")
        self.verticalLayout.addWidget(self.formatlb)
        self.prvkeylb = QtWidgets.QLabel(parent=self.widget)
        self.prvkeylb.setObjectName("prvkeylb")
        self.verticalLayout.addWidget(self.prvkeylb)
        self.pubkeylb = QtWidgets.QLabel(parent=self.widget)
        self.pubkeylb.setObjectName("pubkeylb")
        self.verticalLayout.addWidget(self.pubkeylb)
        self.messlb = QtWidgets.QLabel(parent=self.widget)
        self.messlb.setObjectName("messlb")
        self.verticalLayout.addWidget(self.messlb)
        self.signaturelb = QtWidgets.QLabel(parent=self.widget)
        self.signaturelb.setObjectName("signaturelb")
        self.verticalLayout.addWidget(self.signaturelb)
        self.inptypelb = QtWidgets.QLabel(parent=self.widget)
        self.inptypelb.setObjectName("inptypelb")
        self.verticalLayout.addWidget(self.inptypelb)
        self.resultlb = QtWidgets.QLabel(parent=self.widget)
        self.resultlb.setObjectName("resultlb")
        self.verticalLayout.addWidget(self.resultlb)
        self.functionlb = QtWidgets.QLabel(parent=self.widget)
        self.functionlb.setObjectName("functionlb")
        self.verticalLayout.addWidget(self.functionlb)
        self.gridLayout.addWidget(self.widget, 0, 0, 1, 1)
        self.widget_2 = QtWidgets.QWidget(parent=Form)
        self.widget_2.setObjectName("widget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.widget_2)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.widget_4 = QtWidgets.QWidget(parent=self.widget_2)
        self.widget_4.setObjectName("widget_4")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.widget_4)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.RsaButton = QtWidgets.QRadioButton(parent=self.widget_4)
        self.RsaButton.setObjectName("RsaButton")
        self.horizontalLayout.addWidget(self.RsaButton)
        self.EcdsaButton = QtWidgets.QRadioButton(parent=self.widget_4)
        self.EcdsaButton.setObjectName("EcdsaButton")
        self.horizontalLayout.addWidget(self.EcdsaButton)
        self.buttongroup = QtWidgets.QButtonGroup()
        self.buttongroup.addButton(self.EcdsaButton)
        self.buttongroup.addButton(self.RsaButton)
        self.verticalLayout_2.addWidget(self.widget_4)
        self.formatedit = QtWidgets.QTextEdit(parent=self.widget_2)
        self.formatedit.setObjectName("formatedit")
        self.verticalLayout_2.addWidget(self.formatedit)
        self.prvkeyedit = QtWidgets.QTextEdit(parent=self.widget_2)
        self.prvkeyedit.setObjectName("prvkeyedit")
        self.verticalLayout_2.addWidget(self.prvkeyedit)
        self.pubkeyedit = QtWidgets.QTextEdit(parent=self.widget_2)
        self.pubkeyedit.setEnabled(True)
        self.pubkeyedit.setObjectName("pubkeyedit")
        self.verticalLayout_2.addWidget(self.pubkeyedit)
        self.messageedit = QtWidgets.QTextEdit(parent=self.widget_2)
        self.messageedit.setObjectName("messageedit")
        self.verticalLayout_2.addWidget(self.messageedit)
        self.signatureedit = QtWidgets.QTextEdit(parent=self.widget_2)
        self.signatureedit.setObjectName("signatureedit")
        self.verticalLayout_2.addWidget(self.signatureedit)
        self.inptypeedit = QtWidgets.QTextEdit(parent=self.widget_2)
        self.inptypeedit.setObjectName("inptypeedit")
        self.verticalLayout_2.addWidget(self.inptypeedit)
        self.resultedit = QtWidgets.QTextEdit(parent=self.widget_2)
        self.resultedit.setObjectName("resultedit")
        self.verticalLayout_2.addWidget(self.resultedit)
        self.widget_3 = QtWidgets.QWidget(parent=self.widget_2)
        self.widget_3.setObjectName("widget_3")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.widget_3)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.pushButton_3 = QtWidgets.QPushButton(parent=self.widget_3)
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.genkeyclicked)
        self.horizontalLayout_2.addWidget(self.pushButton_3)
        self.pushButton = QtWidgets.QPushButton(parent=self.widget_3)
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.signclicked)
        self.horizontalLayout_2.addWidget(self.pushButton)
        self.pushButton_2 = QtWidgets.QPushButton(parent=self.widget_3)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.verifyclicked)
        self.horizontalLayout_2.addWidget(self.pushButton_2)
        self.verticalLayout_2.addWidget(self.widget_3)
        self.gridLayout.addWidget(self.widget_2, 0, 1, 1, 1)

        self.retranslateUi(Form)
        QtCore.QMetaObject.connectSlotsByName(Form)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Form"))
        self.algolb.setText(_translate("Form", "Algorithm"))
        self.formatlb.setText(_translate("Form", "Key format"))
        self.prvkeylb.setText(_translate("Form", "Private key"))
        self.pubkeylb.setText(_translate("Form", "Public key"))
        self.messlb.setText(_translate("Form", "Message"))
        self.signaturelb.setText(_translate("Form", "Signature"))
        self.inptypelb.setText(_translate("Form", "Input type"))
        self.resultlb.setText(_translate("Form", "Result"))
        self.functionlb.setText(_translate("Form", "Function"))
        self.RsaButton.setText(_translate("Form", "RSASS-PSS"))
        self.EcdsaButton.setText(_translate("Form", "ECDSA"))
        self.pushButton_3.setText(_translate("Form", "Generate key"))
        self.pushButton.setText(_translate("Form", "Sign"))
        self.pushButton_2.setText(_translate("Form", "Verify"))
    def genkeyclicked(self):
        selected_button = self.buttongroup.checkedButton()
        algo = selected_button.text().strip()
        keyformat = self.formatedit.toPlainText().strip()
        prvkeyfile = self.prvkeyedit.toPlainText().strip()
        pubkeyfile = self.pubkeyedit.toPlainText().strip()
        if keyformat and prvkeyfile and pubkeyfile:
            if algo == "ECDSA":
                call_gen_ecdsa(keyformat,prvkeyfile, pubkeyfile)
            if algo == "RSASS-PSS":
                call_gen_rsasspss(keyformat,prvkeyfile, pubkeyfile)
            print("Keys generated successfully.")
        else:
        # Hiển thị thông báo lỗi hoặc nhắc nhở người dùng nhập đường dẫn tệp hợp lệ
            print("Please enter valid file paths for private and public keys.")
        self.resultedit.setText("private key and public key were saved at" + f"{prvkeyfile}" +  " and " + f"{pubkeyfile}" + " with format " + f"{keyformat}")
    def signclicked(self):
        selected_button = self.buttongroup.checkedButton()
        algo = selected_button.text().strip()
        prvkeyfile = self.prvkeyedit.toPlainText().strip()
      #  prvkeyfile.encode('utf-8')
        message = self.messageedit.toPlainText().strip()
       # message.encode('utf-8')
        signature = self.signatureedit.toPlainText().strip()
        #signature.encode('utf-8')
        inputtype = self.inptypeedit.toPlainText().strip()
        print("true")
       # inputtype.encode('utf-8')
        if(algo == "ECDSA" and inputtype == "input"):
            if(call_sign_ecdsa(prvkeyfile, message, signature)):
                self.resultedit.setText("Message signed successfully, Writing the signature to file:" + f"{signature}")
            else: 
                self.resultedit.setText("Message signed failed")
        if(algo == "ECDSA" and inputtype == "file"):
            m = call_load(message)
            if(call_sign_ecdsa(prvkeyfile, m, signature)):
                self.resultedit.setText("Message file signed successfully, Writing the signature to file:" + f"{signature}")
            else: 
                self.resultedit.setText("Message signed failed")
        if(algo == "RSASS-PSS" and inputtype == "input"):
            if(call_sign_rsasspss(prvkeyfile, message, signature)):
                self.resultedit.setText("Message signed successfully, Writing the signature to file:" + f"{signature}")
            else: 
                self.resultedit.setText("Message signed failed")
        if(algo == "RSASS-PSS" and inputtype == "file"):
            m = call_load(message)
            if(call_sign_rsasspss(prvkeyfile, m, signature)):
                self.resultedit.setText("Message file signed successfully, Writing the signature to file:" + f"{signature}")
            else: 
                self.resultedit.setText("Message signed failed")
    def verifyclicked(self):
        selected_button = self.buttongroup.checkedButton()
        algo = selected_button.text().strip()
        
        pubkeyfile = self.pubkeyedit.toPlainText().strip()
      #  prvkeyfile.encode('utf-8')
        message = self.messageedit.toPlainText().strip()
       # message.encode('utf-8')
        signature = self.signatureedit.toPlainText().strip()
        #signature.encode('utf-8')
        inputtype = self.inptypeedit.toPlainText().strip()
       # inputtype.encode('utf-8')
        if(algo == "ECDSA" and inputtype == "input"):
            if(call_verify_ecdsa(pubkeyfile, message, signature)):
                self.resultedit.setText("Message verified successfully")
            else:
                self.resultedit.setText("Message verified failed")
        if(algo == "ECDSA" and inputtype == "file"):
            m = call_load(message)
            if(call_verify_ecdsa(pubkeyfile, m, signature)):
                self.resultedit.setText("Message verified successfully")
            else:
                self.resultedit.setText("Message verified failed")
        if(algo == "RSASS-PSS" and inputtype == "input"):
            if(call_verify_rsasspss(pubkeyfile, message, signature)):
                self.resultedit.setText("Message verified successfully")
            else:
                self.resultedit.setText("Message verified failed")
        if(algo == "RSASS-PSS" and inputtype == "file"):
            m = call_load(message)
            if(call_verify_rsasspss(pubkeyfile, m, signature)):
                self.resultedit.setText("Message verified successfully")
            else:
                self.resultedit.setText("Message verified failed")
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec())
